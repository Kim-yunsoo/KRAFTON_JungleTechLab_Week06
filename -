 * 원본이 들고 있던 Component를 각 Component의 복사함수를 호출하여 받아온 후 새로 담아서 처리함
 */
void USceneComponent::DuplicateSubObjects()
{
    Super_t::DuplicateSubObjects();

    // AttachChildren을 재귀적으로 복제
    TArray<USceneComponent*> DuplicatedChildren;
    for (USceneComponent* Component : AttachChildren)
    {
        USceneComponent* Child = Cast<USceneComponent>(Component->Duplicate());
        Child->AttachParent = this;

        UE_LOG("Child Name is %s", Child->GetName().c_str());

        DuplicatedChildren.push_back(Child);
    }
    AttachChildren = DuplicatedChildren;
}


UObject* USceneComponent::Duplicate(FObjectDuplicationParameters Parameters)
{
    auto DupObject = static_cast<USceneComponent*>(Super_t::Duplicate(Parameters));

    // 기본 인자 세팅  
    DupObject->RelativeLocation = RelativeLocation;
    DupObject->RelativeRotation = RelativeRotation;
    DupObject->RelativeScale = RelativeScale;
    DupObject->UpdateRelativeTransform();

    //계층 구조 
    if (AttachParent != nullptr)
    {
        if (auto It = Parameters.DuplicationSeed.find(AttachParent); It != Parameters.DuplicationSeed.end())
        { 
            DupObject->AttachParent = static_cast<USceneComponent*>(It->second); 
            DupObject->UpdateRelativeTransform();
        }
    } 

    for (auto& Child : AttachChildren)
    {
        if (auto It = Parameters.DuplicationSeed.find(Child); It != Parameters.DuplicationSeed.end())
        {
            DupObject->AttachChildren.Add(static_cast<USceneComponent*>(It->second));
        }
        else
        {
            auto Params = InitStaticDuplicateObjectParams(Child, DupObject->GetOuter(), FName::GetNone(), Parameters.DuplicationSeed, Parameters.CreatedObjects);
            auto DupComponent= static_cast<USceneComponent*>(Child->Duplicate(Params));
            DupObject->AttachChildren.Add(DupComponent);
        }
    }

    return DupObject;
}
